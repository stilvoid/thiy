package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	"github.com/andrew-d/go-termutil"
	"offend.me.uk/thiy/lib"
)

func printHelp() {
	fmt.Println(`Usage: thiy [-d <DIALECT>] [FILE]

Reads FILE as YAML, converts it into HTML, and outputs the result.

If FILE is missing or "-", input will be read from stdin.

If DIALECT is set, pre-processing will be performed. See the documentation for details.

Available dialects:

	bootstrap

The input document should be a map where each element represent an HTML node. The contents of each element should be a string, an array of strings and maps, or another map representing the contents of the HTML node.

The element keys take the form:

  <TAG>[#<ID>][.CLASS...][(ATTRIBUTE...)]

Example:

  head:
    title: My first page
  body:
    h1: Hello, world
    div#content:
      p:
      - Generated by
      - a(href=https://github.com/stilvoid/thiy): Thiy

Result:

  <!DOCTYPE html>
  <html>
      <head>
          <title>My first page</title>
      </head>
      <body>
          <h1>Hello, world</h1>
          <div id="content">
              <p>
                  Generated by
                  <a href="https://github.com/stilvoid/thiy">Thiy</a>
              </p>
          </div>
      </body>
  </html>
`)
}

func main() {
	var r io.Reader

	dialect := flag.String("d", "raw", "dialect")

	flag.Parse()

	if flag.NArg() < 1 || flag.Arg(0) == "-" {
		if flag.NArg() < 1 && termutil.Isatty(os.Stdin.Fd()) {
			printHelp()
			os.Exit(1)
		}

		r = os.Stdin
	} else {
		file, err := os.Open(flag.Arg(0))
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		r = file
	}

	output, err := lib.Parse(r, *dialect)

	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	fmt.Println(output)
}
